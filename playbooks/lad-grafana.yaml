---
- name: Deploy Grafana to Openshift
  hosts: 127.0.0.1
  connection: local
  tasks:
    - name: Load the common vars file
      include_vars:
        file: "vars/common-vars.yaml"

    - name: Load the grafana vars file
      include_vars:
        file: "vars/grafana-vars.yaml"

    - name: Load the prometheus vars file
      include_vars:
        file: "vars/prometheus-vars.yaml"

    - name: Ensure that the required variables were found in the vars file
      fail:
        msg: "{{ item }} variable was not found in vars files"
      when: "{{ item }} is undefined"
      with_items:
        - namespace
        - grafana_app_name
        - grafana_container_image
        - kubeconfig
        - prometheus_app_name

    - name: Deploy the Grafana objects to Openshift
      k8s:
        kubeconfig: "{{ kubeconfig }}"
        state: present
        namespace: "{{ namespace }}"
        verify_ssl: "no"
        definition: >-
          {{ lookup('template', 'grafana-openshift-objects.yaml') }}

    - name: Wait for the Grafana deployment to complete
      k8s_facts:
        api_version: v1
        kind: DeploymentConfig
        name: "{{ grafana_app_name }}"
        namespace: "{{ namespace }}"
        verify_ssl: "no"
      register: grafana_dc
      until: "grafana_dc.resources[0].status.availableReplicas == 1"
      retries: 15
      delay: 5

    - name: Get the Grafana route
      k8s_facts:
        api_version: v1
        kind: Route
        validate_certs: false
        name: "{{ grafana_app_name }}-route"
        namespace: "{{ namespace }}"
      register: grafana_route

    - name: Get the Prometheus route
      k8s_facts:
        api_version: v1
        kind: Route
        validate_certs: false
        name: "{{ prometheus_app_name }}-route"
        namespace: "{{ namespace }}"
      register: prometheus_route

    - debug:
        msg: "grafana url -> http://{{ grafana_route.resources[0].spec.host }}"

    - debug:
        msg: >-
          prometheus url -> http://{{ prometheus_route.resources[0].spec.host }}

    - name: create json payload for adding Prometheus datasource
      set_fact:
        datasource_payload: >
          {
          "name": "{{ prometheus_app_name }}",
          "type": "prometheus",
          "isDefault": true,
          "typeLogoUrl": "",
          "access": "proxy",
          "url": "http://{{ prometheus_route.resources[0].spec.host }} )",
          "basicAuth": false,
          "withCredentials": false
          }

    - name: Add the lad prometheus datasource
      uri:
        url: "http://{{ grafana_route.resources[0].spec.host }}/api/datasources"
        user: admin
        password: admin
        method: POST
        return_content: "yes"
        force_basic_auth: "yes"
        headers:
          Content-Type: "application/json"
        body: "{{ datasource_payload }}"
        body_format: "json"
      register: grafana_response
      failed_when: >-
        (grafana_response.status != 409) and (grafana_response.status != 200)

    - name: create json payload for adding grafana dashboard
      set_fact:
        dashboard_payload: >-
          {'Dashboard': {{ lookup('file',
          'templates/grafana-dashboards/log_anomaly_detector_dashboard.json')
          }} }

    - name: Add the lad grafana dashboard
      uri:
        url: >-
          http://{{ grafana_route.resources[0].spec.host }}/api/dashboards/db
        user: admin
        password: admin
        method: POST
        return_content: "yes"
        force_basic_auth: "yes"
        headers:
          Content-Type: "application/json"
        body: "{{ dashboard_payload }}"
        body_format: "json"
      register: grafana_response
      failed_when: >-
        (grafana_response.status != 412) and (grafana_response.status != 200)
