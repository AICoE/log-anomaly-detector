---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: "{{ database_service_name }}"
  name: "{{ database_service_name }}"
stringData:
  database-name: "{{ mysql_database }}"
  database-password: "{{ mysql_password }}"
  database-root-password: "{{ mysql_root_password }}"
  database-user: "{{ mysql_user }}"

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    template.openshift.io/expose-uri: mysql://{.spec.clusterIP}:{.spec.ports[?(.name=="mysql")].port}
  labels:
    app: "{{ database_service_name }}"
  name: "{{ database_service_name }}"
spec:
  ports:
    - name: mysql
      port: "{{ mysql_service_port }}"
  selector:
    name: "{{ database_service_name }}"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: "{{ database_service_name }}"
  name: "{{ database_service_name }}"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "{{ volume_capacity }}"

---
apiVersion: v1
kind: DeploymentConfig
metadata:
  annotations:
    template.alpha.openshift.io/wait-for-ready: 'true'
  labels:
    app: "{{ database_service_name }}"
  name: "{{ database_service_name }}"
spec:
  replicas: 1
  selector:
    name: "{{ database_service_name }}"
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        name: "{{ database_service_name }}"
    spec:
      containers:
        - env:
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: "{{ database_service_name }}"
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: "{{ database_service_name }}"
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-root-password
                  name: "{{ database_service_name }}"
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  key: database-name
                  name: "{{ database_service_name }}"
          image: " "
          imagePullPolicy: IfNotPresent
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: {{mysql_service_port}}
            timeoutSeconds: 1
          name: mysql
          ports:
            - containerPort: "{{ mysql_service_port }}"
          readinessProbe:
            exec:
              command:
                - "/bin/sh"
                - "-i"
                - "-c"
                - MYSQL_PWD="{{ mysql_password }}" mysql -h 127.0.0.1 -u {{ mysql_user }} -D {{ mysql_database }}
                  -e 'SELECT 1'
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            limits:
              memory: "{{ memory_limit }}"
          volumeMounts:
            - mountPath: "/var/lib/mysql/data"
              name: "{{ database_service_name }}-data"
      volumes:
        - name: "{{ database_service_name }}-data"
          persistentVolumeClaim:
            claimName: "{{ database_service_name }}"
  triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
          - mysql
        from:
          kind: ImageStreamTag
          name: mysql:{{ mysql_version }}
          namespace: "openshift"
      type: ImageChange
    - type: ConfigChange
